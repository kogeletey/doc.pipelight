# Pipeline Template helpers <Badge type="danger" text="alpha" />

Once you defined a Docker Object with **docker** or **docker+** helpers,
you usually write your pipeline in a few lines.
They often get repetitive, and that's where templating come in play.

::: info

Every previously introduced helpers provide users great convenience and modularity
for small to medium pipelines generation.

But the've all been made to support the top level helpers that are following,
Aiming to ease:

- Dig up complete docker infrastructures,
- Virtual machine creation and provisionning,
- Full server set up (web, mail, git...)

:::

## Basic usage

### How it works ?

Here is the core of a pipeline using template helpers.

```ts
const { deploy } = useTemplate();

// Create a Docker Object with docker or docker+
const docker = new Docker(params);

// Local deployment
const my_pipeline = deploy(docker);

// Remote deployment
const my_pipeline = deploy(docker, "linode");
```

### Customize the pipeline

```ts
// Create a step to build your js files
const build: Step = step("build_files", () => ["pnpm install", "vite build"]);

// Add the build step on the top of the pipeline steps
my_pipeline.steps.unshift(build);

// Add triggers
my_pipeline.add_trigger!({
  branches: ["master", "main", "dev"],
  actions: ["pre-push", "manual"]
});
```

```sh
.docker
└── Dockerfile.front
```

Edit the dockerfile to copy built files inside container

```dockerfile
# Dockerfile.front

FROM archlinux:latest
# Install dependencies
RUN pacman -Sy
RUN pacman -S --noconfirm npm
RUN npm add -g serve

# Create working dir
RUN mkdir app
WORKDIR /app
COPY ./dist .

# Serve and expose port
EXPOSE 3000
ENTRYPOINT ["serve"]

```

## Test

Run tests inside docker containers

```ts
const { deploy } = useTemplate();
```
